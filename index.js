// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É dotenv
require("dotenv").config();
// –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ grammy –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–µ–≥–æ –∫–ª–∞—Å—Å Bot
const { Bot, GrammyError, HttpError, Keyboard } = require("grammy");
const { socials } = require("./utils/links");
const { logger } = require("./utils/logger");
const { createKeyboard } = require("./utils/helper");

// –°–æ–∑–¥–∞–µ–º —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è
// –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
const bot = new Bot(process.env.BOT_API_KEY);

//—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {
  const startKeyboard = new Keyboard()
    .text("üôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    .row()
    .text("üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
    .row()
    .text("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–∞–º")
    .row()
    .resized()
    .oneTime();
  await ctx.react("üëç");
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç ü§ñ");
  await ctx.reply("–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–∏—Ä–∞–π üëá", {
    reply_markup: startKeyboard,
  });
});

bot.hears("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", async (ctx) => {
  const startKeyboard = new Keyboard()
    .text("üôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    .row()
    .text("üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
    .row()
    .text("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–∞–º")
    .row()
    .resized()
    .oneTime();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: startKeyboard,
  });
});

function handleButtonClicks(items) {
  items.forEach((item) => {
    bot.hears(item.name, async (ctx) => {
      let message = "";
      message = `–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ ${item.name}: ${item.url}`;
      await ctx.reply(message);
    });
  });
}

handleButtonClicks(socials);

bot.hears("üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", async (ctx) => {
  const socialKeyboard = createKeyboard(socials);
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:", {
    reply_markup: socialKeyboard,
  });
});

bot.hears("üôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx) => {
  await ctx.reply("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å");
  await ctx.reply(
    "üìé –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –≤–æ–ø—Ä–æ—Å—É —Å—Å—ã–ª–∫—É, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª"
  );
});

bot.hears("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–∞–º", async (ctx) => {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–∞–º");
});

bot.command("menu", async (ctx) => {
  const startKeyboard = new Keyboard()
    .text("üôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    .row()
    .text("üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏")
    .row()
    .text("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–∞–º")
    .row()
    .resized()
    .oneTime();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: startKeyboard,
  });
});

bot.hears([/–ø–∏–ø–µ—Ü/, /–¥—Ä—è–Ω—å/], async (ctx) => {
  await ctx.reply("–ù–µ –≥—Ä—É—Å—Ç–∏, –∫–æ—Ç–∏–∫!üòΩ");
});

//—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞
bot.on("message", async (ctx) => {
  await ctx.reply("–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...");
});

bot.api.setMyCommands([
  { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
  { command: "menu", description: "–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ" },
]);

//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
